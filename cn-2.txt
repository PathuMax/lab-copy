CheckSum:

# Checksum Implementation

def checksum(data_blocks):
    sum = 0
    for block in data_blocks:
        sum += int(block, 2)
        # If carry is generated, wrap around
        if sum > 0b11111111:  # for 8-bit blocks
            sum = (sum & 0b11111111) + 1

    # 1's complement
    checksum = (~sum) & 0b11111111
    return format(checksum, '08b')


def verify_checksum(data_blocks, received_checksum):
    total = sum(int(b, 2) for b in data_blocks) + int(received_checksum, 2)
    while total > 0b11111111:
        total = (total & 0b11111111) + 1

    return total == 0b11111111


# Example
data = ["10101001", "00111001"]
chk = checksum(data)
print("Checksum:", chk)
print("Data verification:", "No Error" if verify_checksum(data, chk) else "Error detected")


CRC:


# CRC Implementation

def xor(a, b):
    result = []
    for i in range(1, len(b)):
        result.append('0' if a[i] == b[i] else '1')
    return ''.join(result)

def crc(data, generator):
    n = len(generator)
    appended_data = data + '0' * (n - 1)
    temp = appended_data[:n]

    for i in range(len(data)):
        if temp[0] == '1':
            temp = xor(temp, generator) + appended_data[n + i]
        else:
            temp = xor('0' * n, temp) + appended_data[n + i]
    remainder = temp[-(n - 1):]
    return remainder

def transmit(data, generator):
    remainder = crc(data, generator)
    transmitted = data + remainder
    print("Transmitted Codeword:", transmitted)
    return transmitted

def receiver(codeword, generator):
    remainder = crc(codeword, generator)
    if int(remainder) == 0:
        print("No Error Detected ✅")
    else:
        print("Error Detected ❌")


# Example
data = "1101011011"
generator = "10011"
codeword = transmit(data, generator)
receiver(codeword, generator)
