<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Location and Speed Tracker</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
            margin: 0;
            padding: 20px;
            background-color: #f0f2f5;
            color: #1c1e21;
        }
        .container {
            max-width: 600px;
            margin: 0 auto;
            padding: 20px;
            background-color: #fff;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }
        h1 {
            text-align: center;
            color: #0d47a1;
        }
        .data-card {
            background: #e3f2fd;
            border-left: 5px solid #1976d2;
            padding: 15px;
            margin-bottom: 15px;
            border-radius: 4px;
        }
        .data-card h2 {
            margin: 0 0 10px 0;
            font-size: 1.2em;
            color: #0d47a1;
        }
        .data-point {
            font-size: 1.1em;
            display: flex;
            justify-content: space-between;
            margin-bottom: 5px;
        }
        .data-point span:first-child {
            font-weight: bold;
        }
        .data-point span:last-child {
            font-family: "SF Mono", "Fira Code", "Fira Mono", "Roboto Mono", monospace;
            color: #333;
        }
        .permission-btn {
            display: block;
            width: 100%;
            padding: 15px;
            font-size: 1.2em;
            font-weight: bold;
            color: #fff;
            background-color: #4CAF50;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            text-align: center;
            margin-bottom: 20px;
        }
    </style>
</head>
<body>

    <div class="container">
        <h1>üõ∞Ô∏è Device Tracker</h1>
        
        <button id="startBtn" class="permission-btn">Start Tracking</button>

        <div class="data-card">
            <h2>Location (from GPS)</h2>
            <div class="data-point"><span>Latitude:</span> <span id="latitude">--</span></div>
            <div class="data-point"><span>Longitude:</span> <span id="longitude">--</span></div>
        </div>

        <div class="data-card">
            <h2>Speed</h2>
            <div class="data-point"><span>From GPS (accurate):</span> <span id="speed-gps">--</span> m/s</div>
            <div class="data-point"><span>From Accelerometer:</span> <span id="speed-accel">--</span> m/s</div>
        </div>
        
        <div class="data-card">
            <h2>Raw Sensor Data</h2>
            <div class="data-point"><span>Acceleration X:</span> <span id="accel-x">--</span></div>
            <div class="data-point"><span>Acceleration Y:</span> <span id="accel-y">--</span></div>
            <div class="data-point"><span>Acceleration Z:</span> <span id="accel-z">--</span></div>
        </div>
    </div>

    <script>
        // Get references to all the display elements
        const latElement = document.getElementById('latitude');
        const lonElement = document.getElementById('longitude');
        const speedGpsElement = document.getElementById('speed-gps');
        const speedAccelElement = document.getElementById('speed-accel');
        const accelXElement = document.getElementById('accel-x');
        const accelYElement = document.getElementById('accel-y');
        const accelZElement = document.getElementById('accel-z');
        const startBtn = document.getElementById('startBtn');

        // Variables for calculating speed from accelerometer
        let velocity = { x: 0, y: 0, z: 0 };
        let lastTimestamp = null;
        
        // --- Main function to start sensors ---
        function startSensors() {
            // Hide the button after it's clicked
            startBtn.style.display = 'none';

            // 1. LOCATION AND GPS-BASED SPEED
            if ('geolocation' in navigator) {
                navigator.geolocation.watchPosition((position) => {
                    const { latitude, longitude, speed } = position.coords;
                    latElement.textContent = latitude.toFixed(6);
                    lonElement.textContent = longitude.toFixed(6);
                    // The speed from GPS is highly reliable
                    speedGpsElement.textContent = speed ? speed.toFixed(2) : '0.00';
                }, (error) => {
                    console.error("Geolocation error:", error);
                    latElement.textContent = "Error";
                }, { enableHighAccuracy: true });
            } else {
                latElement.textContent = "Not Supported";
            }

            // 2. ACCELEROMETER AND CALCULATED SPEED
            try {
                const sensor = new LinearAccelerationSensor({ frequency: 60 });

                sensor.addEventListener('reading', () => {
                    accelXElement.textContent = sensor.x.toFixed(2);
                    accelYElement.textContent = sensor.y.toFixed(2);
                    accelZElement.textContent = sensor.z.toFixed(2);
                    
                    if (lastTimestamp === null) {
                        lastTimestamp = sensor.timestamp;
                        return;
                    }

                    const deltaTime = (sensor.timestamp - lastTimestamp) / 1000;
                    
                    velocity.x += sensor.x * deltaTime;
                    velocity.y += sensor.y * deltaTime;
                    velocity.z += sensor.z * deltaTime;

                    const currentSpeed = Math.sqrt(velocity.x**2 + velocity.y**2 + velocity.z**2);
                    speedAccelElement.textContent = currentSpeed.toFixed(2);
                    
                    lastTimestamp = sensor.timestamp;
                });
                
                sensor.addEventListener('error', event => {
                   console.log(event.error.name, event.error.message);
                   speedAccelElement.textContent = "Sensor Error";
                });
                
                sensor.start();

            } catch (error) {
                console.error("Sensor API error:", error);
                speedAccelElement.textContent = "Not Supported";
            }
        }
        
        startBtn.addEventListener('click', startSensors);
    </script>
</body>
</html>
